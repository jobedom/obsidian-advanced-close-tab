import esbuild from 'esbuild';
import process from 'process';
import builtins from 'builtin-modules';
import esbuildSvelte from 'esbuild-svelte';
import sveltePreprocess from 'svelte-preprocess';
import inlineWorkerPlugin from 'esbuild-plugin-inline-worker';

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

const context = await esbuild.context({
	banner: {
		js: banner
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins
	],
	format: "cjs",
	target: "es2021",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	plugins: [
		inlineWorkerPlugin(),
		esbuildSvelte({
			compilerOptions: {
				css: 'injected'
			},
			preprocess: sveltePreprocess(),
			filterWarnings: (warning) => {
				// disable a11y warnings
				return !(warning.code.startsWith("a11y-"));
			}

		})

	]
});

const cssContext = await esbuild.context({
	entryPoints: ["src/styles.css"],
	bundle: true,
	outfile: "styles.css"
});

if (prod) {
	await context.rebuild();
	await cssContext.rebuild();
	process.exit(0);
} else {
	await Promise.all([cssContext.watch(), context.watch()]);
}
